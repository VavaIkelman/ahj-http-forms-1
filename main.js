(()=>{"use strict";var e,r,t,n,o,i,a,c={772:(e,r,t)=>{function n(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}t(177),new(function(){function e(r){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.button=r,this.showPopover=this.showPopover.bind(this)}var r,t;return r=e,(t=[{key:"init",value:function(){this.createPopover(),this.button.addEventListener("click",this.showPopover)}},{key:"createPopover",value:function(){this.popContainer=document.createElement("div"),this.popContainer.classList.add("pop_container");var e=document.createElement("div");e.classList.add("pop_title"),e.innerText=this.button.dataset.popoverTitle;var r=document.createElement("div");r.classList.add("pop_text"),r.innerText=this.button.dataset.popoverContent,this.popContainer.append(e,r)}},{key:"showPopover",value:function(){if(document.body.contains(this.popContainer))this.popContainer.remove();else{this.button.after(this.popContainer);var e=this.button.getBoundingClientRect();this.popContainer.style.left="".concat(window.scrollX+e.left+this.button.offsetWidth/2-this.popContainer.offsetWidth/2,"px"),this.popContainer.style.top="".concat(window.scrollY+e.top-this.popContainer.offsetHeight-5,"px")}}}])&&n(r.prototype,t),e}())(document.querySelector(".button")).init()},783:(e,r,t)=>{var n=t(618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function c(){}function d(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded=!0,e.parentNode.removeChild(e)})),t.addEventListener("error",(function(){t.isLoaded=!0,e.parentNode.removeChild(e)})),t.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function s(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),c;var t,u,p=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var t=r.split(/([^\\/]+)\.js$/),o=t&&t[1];return o&&e?e.split(",").map((function(e){var t=new RegExp("".concat(o,"\\.js$"),"g");return n(r.replace(t,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return t=function(){var e=p(r.filename),t=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),t=!1;return a.call(r,(function(r){if(r.href){var o=function(e,r){var t;return e=n(e,{stripWWW:!1}),r.some((function(n){e.indexOf(r)>-1&&(t=n)})),t}(r.href,e);l(o)&&!0!==r.visited&&o&&(d(r,o),t=!0)}})),t}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,u=0,function(){var e=this,r=arguments,n=function(){return t.apply(e,r)};clearTimeout(u),u=setTimeout(n,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(r,"i"),"").split("/"),n=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",r+n+t.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},177:(e,r,t)=>{var n=t(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},d={};function s(e){if(d[e])return d[e].exports;var r=d[e]={id:e,exports:{}},t={id:e,module:r,factory:c[e],require:s};return s.i.forEach((function(e){e(t)})),r=t.module,t.factory.call(r.exports,r,r.exports,t.require),r.exports}s.m=c,s.c=d,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>"main.css",s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"d37d53df309ae793cfa4",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="ahj-http-forms-1:",s.l=(t,n,o)=>{if(e[t])e[t].push(n);else{var i,a;if(void 0!==o)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var l=c[d];if(l.getAttribute("src")==t||l.getAttribute("data-webpack")==r+o){i=l;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.setAttribute("data-webpack",r+o),i.src=t),e[t]=[n];var u=(r,n)=>{i.onerror=i.onload=null,clearTimeout(p);var o=e[t];if(delete e[t],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),r)return r(n)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=u.bind(null,i.onerror),i.onload=u.bind(null,i.onload),a&&document.head.appendChild(i)}},(()=>{var e,r,t,n,o={},i=s.c,a=[],c=[],d="idle";function l(e){d=e;for(var r=0;r<c.length;r++)c[r].call(null,e)}function u(e){if(0===r.length)return e();var t=r;return r=[],Promise.all(t).then((function(){return u(e)}))}function p(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return l("check"),s.hmrM().then((function(n){if(!n)return l(v()?"ready":"idle"),null;l("prepare");var o=[];return r=[],t=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,r){return s.hmrC[r](n.c,n.r,n.m,e,t,o),e}),[])).then((function(){return u((function(){return e?h(e):(l("ready"),o)}))}))}))}function f(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},v();var r=t.map((function(r){return r(e)}));t=void 0;var o,i=r.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),r.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var a=function(e){o||(o=e)},c=[];return r.forEach((function(e){if(e.apply){var r=e.apply(a);if(r)for(var t=0;t<r.length;t++)c.push(r[t])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):n?h(e).then((function(e){return c.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):(l("idle"),Promise.resolve(c))}function v(){if(n)return t||(t=[]),Object.keys(s.hmrI).forEach((function(e){n.forEach((function(r){s.hmrI[e](r,t)}))})),n=void 0,!0}s.hmrD=o,s.i.push((function(h){var v,m,y,g=h.module,b=function(t,n){var o=i[n];if(!o)return t;var c=function(r){if(o.hot.active){if(i[r]){var c=i[r].parents;-1===c.indexOf(n)&&c.push(n)}else a=[n],e=r;-1===o.children.indexOf(r)&&o.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+n),a=[];return t(r)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var p in t)Object.prototype.hasOwnProperty.call(t,p)&&"e"!==p&&Object.defineProperty(c,p,s(p));return c.e=function(e){return function(e){switch(d){case"ready":return l("prepare"),r.push(e),u((function(){l("ready")})),e;case"prepare":return r.push(e),e;default:return e}}(t.e(e))},c}(h.require,h.id);g.hot=(v=h.id,m=g,y={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==v,_requireSelf:function(){a=m.parents.slice(),e=v,s(v)},active:!0,accept:function(e,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._acceptedDependencies[e[t]]=r||function(){};else y._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._declinedDependencies[e[r]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=y._disposeHandlers.indexOf(e);r>=0&&y._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":t=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,t)})),l("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(v)}},check:p,apply:f,status:function(e){if(!e)return d;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var r=c.indexOf(e);r>=0&&c.splice(r,1)},data:o[v]},e=void 0,y),g.parents=a,g.children=[],a=[],h.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var r=s.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),t=(e,r,t,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)t();else{var a=i&&("load"===i.type?"missing":i.type),c=i&&i.target&&i.target.href||r,d=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=a,d.request=c,o.parentNode.removeChild(o),n(d)}},o.href=r,document.head.appendChild(o),o},n=(e,r)=>{for(var t=document.getElementsByTagName("link"),n=0;n<t.length;n++){var o=(a=t[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===r))return a}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var a;if((o=(a=i[n]).getAttribute("data-href"))===e||o===r)return a}},o=[],i=[],a=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var r=o[e];r.parentNode&&r.parentNode.removeChild(r)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),s.hmrC.miniCss=(e,r,c,d,l,u)=>{l.push(a),e.forEach((e=>{var r=s.miniCssF(e),a=s.p+r;const c=n(r,a);c&&d.push(new Promise(((r,n)=>{var d=t(e,a,(()=>{d.as="style",d.rel="preload",r()}),n);o.push(c),i.push(d)})))}))},(()=>{var e,r,t,n,o={179:0},i={};function a(e){return new Promise(((r,t)=>{i[e]=r;var n=s.p+s.hu(e),o=new Error;s.l(n,(r=>{if(i[e]){i[e]=void 0;var n=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+a+")",o.name="ChunkLoadError",o.type=n,o.request=a,t(o)}}))}))}function c(i){function a(e){for(var r=[e],t={},n=r.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,a=o.chain,d=s.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],p=s.c[u];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([u]),moduleId:i,parentId:u};-1===r.indexOf(u)&&(p.hot._acceptedDependencies[i]?(t[u]||(t[u]=[]),c(t[u],[i])):(delete t[u],r.push(u),n.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function c(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,e=void 0;var d={},l=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in r)if(s.o(r,f)){var h,v=r[f],m=!1,y=!1,g=!1,b="";switch((h=v?a(f):{type:"disposed",moduleId:f}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(h),i.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+b));break;case"accepted":i.onAccepted&&i.onAccepted(h),y=!0;break;case"disposed":i.onDisposed&&i.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(f in u[f]=v,c(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,f)&&(d[f]||(d[f]=[]),c(d[f],h.outdatedDependencies[f]));g&&(c(l,[h.moduleId]),u[f]=p)}r=void 0;for(var w,E=[],_=0;_<l.length;_++){var C=l[_];s.c[C]&&s.c[C].hot._selfAccepted&&u[C]!==p&&!s.c[C].hot._selfInvalidated&&E.push({module:C,require:s.c[C].hot._requireSelf,errorHandler:s.c[C].hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete o[e]})),t=void 0;for(var r,n=l.slice();n.length>0;){var i=n.pop(),a=s.c[i];if(a){var c={},u=a.hot._disposeHandlers;for(_=0;_<u.length;_++)u[_].call(null,c);for(s.hmrD[i]=c,a.hot.active=!1,delete s.c[i],delete d[i],_=0;_<a.children.length;_++){var p=s.c[a.children[_]];p&&(e=p.parents.indexOf(i))>=0&&p.parents.splice(e,1)}}}for(var f in d)if(s.o(d,f)&&(a=s.c[f]))for(w=d[f],_=0;_<w.length;_++)r=w[_],(e=a.children.indexOf(r))>=0&&a.children.splice(e,1)},apply:function(e){for(var r in u)s.o(u,r)&&(s.m[r]=u[r]);for(var t=0;t<n.length;t++)n[t](s);for(var o in d)if(s.o(d,o)){var a=s.c[o];if(a){w=d[o];for(var c=[],p=[],f=0;f<w.length;f++){var h=w[f],v=a.hot._acceptedDependencies[h];if(v){if(-1!==c.indexOf(v))continue;c.push(v),p.push(h)}}for(var m=0;m<c.length;m++)try{c[m].call(null,w)}catch(r){i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[m],error:r}),i.ignoreErrored||e(r)}}}for(var y=0;y<E.length;y++){var g=E[y],b=g.module;try{g.require(b)}catch(r){if("function"==typeof g.errorHandler)try{g.errorHandler(r)}catch(t){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:t,originalError:r}),i.ignoreErrored||e(t),e(r)}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:b,error:r}),i.ignoreErrored||e(r)}}return l}}}self.webpackHotUpdateahj_http_forms_1=(e,t,o)=>{for(var a in t)s.o(t,a)&&(r[a]=t[a]);o&&n.push(o),i[e]&&(i[e](),i[e]=void 0)},s.hmrI.jsonp=function(e,o){r||(r={},n=[],t=[],o.push(c)),s.o(r,e)||(r[e]=s.m[e])},s.hmrC.jsonp=function(i,d,l,u,p,f){p.push(c),e={},t=d,r=l.reduce((function(e,r){return e[r]=!1,e}),{}),n=[],i.forEach((function(r){s.o(o,r)&&void 0!==o[r]&&(u.push(a(r)),e[r]=!0)})),s.f&&(s.f.jsonpHmr=function(r,t){e&&!s.o(e,r)&&s.o(o,r)&&void 0!==o[r]&&(t.push(a(r)),e[r]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(772)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haGotaHR0cC1mb3Jtcy0xL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9haGotaHR0cC1mb3Jtcy0xL3dlYnBhY2svcnVudGltZS9jc3MgbG9hZGluZyIsIndlYnBhY2s6Ly9haGotaHR0cC1mb3Jtcy0xLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly9haGotaHR0cC1mb3Jtcy0xLy4vc3JjL2pzL1BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vYWhqLWh0dHAtZm9ybXMtMS8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9haGotaHR0cC1mb3Jtcy0xLy4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL25vcm1hbGl6ZS11cmwuanMiLCJ3ZWJwYWNrOi8vYWhqLWh0dHAtZm9ybXMtMS8uL3NyYy9jc3Mvc3R5bGUuY3NzPzZiN2IiLCJ3ZWJwYWNrOi8vYWhqLWh0dHAtZm9ybXMtMS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9haGotaHR0cC1mb3Jtcy0xL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCB1cGRhdGUgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYWhqLWh0dHAtZm9ybXMtMS93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Foai1odHRwLWZvcm1zLTEvd2VicGFjay9ydW50aW1lL2dldCB1cGRhdGUgbWFuaWZlc3QgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYWhqLWh0dHAtZm9ybXMtMS93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giLCJ3ZWJwYWNrOi8vYWhqLWh0dHAtZm9ybXMtMS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Foai1odHRwLWZvcm1zLTEvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9haGotaHR0cC1mb3Jtcy0xL3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL2Foai1odHRwLWZvcm1zLTEvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYWhqLWh0dHAtZm9ybXMtMS93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9haGotaHR0cC1mb3Jtcy0xL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJjcmVhdGVTdHlsZXNoZWV0IiwiZmluZFN0eWxlc2hlZXQiLCJvbGRUYWdzIiwibmV3VGFncyIsImFwcGx5SGFuZGxlciIsImVsZW1lbnQiLCJ0aGlzIiwiYnV0dG9uIiwic2hvd1BvcG92ZXIiLCJiaW5kIiwiY3JlYXRlUG9wb3ZlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwb3BDb250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJwb3BUaXRsZSIsImlubmVyVGV4dCIsImRhdGFzZXQiLCJwb3BvdmVyVGl0bGUiLCJwb3BUZXh0IiwicG9wb3ZlckNvbnRlbnQiLCJhcHBlbmQiLCJib2R5IiwiY29udGFpbnMiLCJyZW1vdmUiLCJhZnRlciIsImNvb3JkcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInN0eWxlIiwibGVmdCIsIndpbmRvdyIsInNjcm9sbFgiLCJvZmZzZXRXaWR0aCIsInRvcCIsInNjcm9sbFkiLCJvZmZzZXRIZWlnaHQiLCJxdWVyeVNlbGVjdG9yIiwiaW5pdCIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJPYmplY3QiLCJjcmVhdGUiLCJub0RvY3VtZW50IiwiZm9yRWFjaCIsIkFycmF5IiwicHJvdG90eXBlIiwibm9vcCIsInVwZGF0ZUNzcyIsImVsIiwidXJsIiwiaHJlZiIsInNwbGl0IiwiaXNVcmxSZXF1ZXN0IiwiaXNMb2FkZWQiLCJpbmRleE9mIiwidmlzaXRlZCIsIm5ld0VsIiwiY2xvbmVOb2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY29uY2F0IiwiRGF0ZSIsIm5vdyIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJyZWxvYWRBbGwiLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjYWxsIiwidGVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVJZCIsIm9wdGlvbnMiLCJjb25zb2xlIiwibG9nIiwiZm4iLCJ0aW1lb3V0IiwiZ2V0U2NyaXB0U3JjIiwic3JjIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxhc3RTY3JpcHRUYWciLCJsZW5ndGgiLCJmaWxlTWFwIiwic3BsaXRSZXN1bHQiLCJmaWxlbmFtZSIsIm1hcCIsIm1hcFJ1bGUiLCJyZWciLCJSZWdFeHAiLCJyZXBsYWNlIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9hZGVkIiwicmV0Iiwic3RyaXBXV1ciLCJzb21lIiwiZ2V0UmVsb2FkVXJsIiwicmVsb2FkU3R5bGUiLCJsb2NhbHMiLCJqb2luIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJmdW5jdGlvbkNhbGwiLCJhcHBseSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJ1cmxTdHJpbmciLCJ0cmltIiwicHJvdG9jb2wiLCJjb21wb25lbnRzIiwiaG9zdCIsInRvTG93ZXJDYXNlIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJpdGVtIiwicG9wIiwicHVzaCIsImNzc1JlbG9hZCIsImlkIiwiaG90IiwiZGlzcG9zZSIsImFjY2VwdCIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJleGVjT3B0aW9ucyIsImZhY3RvcnkiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwicmVxdWlyZSIsImkiLCJoYW5kbGVyIiwibSIsImMiLCJodSIsImNodW5rSWQiLCJoIiwibWluaUNzc0YiLCJobXJGIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsImUiLCJvIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwibCIsImRvbmUiLCJrZXkiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwicyIsImdldEF0dHJpYnV0ZSIsImNoYXJzZXQiLCJuYyIsInNldEF0dHJpYnV0ZSIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2IiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiZG9uZUZucyIsInR5cGUiLCJ0YXJnZXQiLCJoZWFkIiwiY3VycmVudENoaWxkTW9kdWxlIiwiYmxvY2tpbmdQcm9taXNlcyIsImN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzIiwicXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIiwiY3VycmVudE1vZHVsZURhdGEiLCJpbnN0YWxsZWRNb2R1bGVzIiwiY3VycmVudFBhcmVudHMiLCJyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMiLCJjdXJyZW50U3RhdHVzIiwic2V0U3RhdHVzIiwibmV3U3RhdHVzIiwid2FpdEZvckJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2VyIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJFcnJvciIsImhtck0iLCJ1cGRhdGUiLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsInVwZGF0ZWRNb2R1bGVzIiwia2V5cyIsImhtckMiLCJwcm9taXNlcyIsInIiLCJpbnRlcm5hbEFwcGx5IiwiaG90QXBwbHkiLCJyZXNvbHZlIiwicmVzdWx0cyIsImVycm9yIiwiZXJyb3JzIiwiZmlsdGVyIiwiQm9vbGVhbiIsInJlc3VsdCIsInJlcG9ydEVycm9yIiwiZXJyIiwib3V0ZGF0ZWRNb2R1bGVzIiwibW9kdWxlcyIsImxpc3QiLCJobXJJIiwiaG1yRCIsIm1lIiwicmVxdWVzdCIsImFjdGl2ZSIsInBhcmVudHMiLCJjaGlsZHJlbiIsIndhcm4iLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJwcm9taXNlIiwidHJhY2tCbG9ja2luZ1Byb21pc2UiLCJjcmVhdGVSZXF1aXJlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9tYWluIiwiX3JlcXVpcmVTZWxmIiwic2xpY2UiLCJkZXAiLCJjYWxsYmFjayIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiaW52YWxpZGF0ZSIsImNoZWNrIiwic3RhdHVzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwicCIsImZ1bGxocmVmIiwicmVqZWN0IiwibGlua1RhZyIsInJlbCIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiY29kZSIsImV4aXN0aW5nTGlua1RhZ3MiLCJkYXRhSHJlZiIsInRhZyIsImV4aXN0aW5nU3R5bGVUYWdzIiwib2xkVGFnIiwibWluaUNzcyIsImNodW5rSWRzIiwicmVtb3ZlZENodW5rcyIsInJlbW92ZWRNb2R1bGVzIiwiYXBwbHlIYW5kbGVycyIsInVwZGF0ZWRNb2R1bGVzTGlzdCIsImFzIiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiMTc5Iiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwicGFyZW50IiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsImYiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImoiLCJvdXRkYXRlZE1vZHVsZUlkIiwiZXJyb3JIYW5kbGVyIiwiZGVwZW5kZW5jeSIsImRpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwiY2FsbGJhY2tzIiwiZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzIiwiYWNjZXB0Q2FsbGJhY2siLCJrIiwib25FcnJvcmVkIiwiZGVwZW5kZW5jeUlkIiwiaWdub3JlRXJyb3JlZCIsImVycjIiLCJvcmlnaW5hbEVycm9yIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwianNvbnAiLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJzdGF0dXNUZXh0IiwianNvbiJdLCJtYXBwaW5ncyI6InVCQUFJQSxFQUNBQyxFQ0RBQyxFQTJCQUMsRUF3QkFDLEVBQ0FDLEVBQ0FDLEUsOExDbkRjLEksV0NDaEIsV0FBWUMsSSw0RkFBUyxTQUNuQkMsS0FBS0MsT0FBU0YsRUFDZEMsS0FBS0UsWUFBY0YsS0FBS0UsWUFBWUMsS0FBS0gsTSxvREFJekNBLEtBQUtJLGdCQUNMSixL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QmtCLEVBQUVnSSxFQUFxQnhJLElBQzVDVixFQUFvQmtCLEVBQUVvSSxFQUFpQjVJLFNBQ1ZaLElBQTdCd0osRUFBZ0I1SSxLQUVoQndELEVBQVMxRSxLQUFLaUssRUFBZ0IvSSxJQUM5QndJLEVBQW9CeEksSUFBVyxNQU1uQ1YsRUFBb0I0RCxLQUFPLEtBQzFCLEdBQXFCLG9CQUFWOEksTUFBdUIsTUFBTSxJQUFJL0ksTUFBTSxzQ0FDbEQsT0FBTytJLE1BQU0xTSxFQUFvQjhILEVBQUk5SCxFQUFvQmEsUUFBUTJDLE1BQU1tSixJQUN0RSxHQUF1QixNQUFwQkEsRUFBU3BGLE9BQVosQ0FDQSxJQUFJb0YsRUFBU0MsR0FBSSxNQUFNLElBQUlqSixNQUFNLG1DQUFxQ2dKLEVBQVNFLFlBQy9FLE9BQU9GLEVBQVNHLGEsR0NyZGxCOU0sRUFBb0IsTSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiYWhqLWh0dHAtZm9ybXMtMTpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5KSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gZm4oZXZlbnQpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJ2YXIgY3JlYXRlU3R5bGVzaGVldCA9IChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHRyZXR1cm4gbGlua1RhZztcbn07XG52YXIgZmluZFN0eWxlc2hlZXQgPSAoaHJlZiwgZnVsbGhyZWYpID0+IHtcblx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHRhZztcblx0fVxuXHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcblx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiB0YWc7XG5cdH1cbn07XG52YXIgbG9hZFN0eWxlc2hlZXQgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGlmKGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcblx0XHRjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpO1xuXHR9KTtcbn1cbi8vIG5vIGNodW5rIGxvYWRpbmdcblxudmFyIG9sZFRhZ3MgPSBbXTtcbnZhciBuZXdUYWdzID0gW107XG52YXIgYXBwbHlIYW5kbGVyID0gKG9wdGlvbnMpID0+IHtcblx0cmV0dXJuIHsgZGlzcG9zZTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvbGRUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgb2xkVGFnID0gb2xkVGFnc1tpXTtcblx0XHRcdGlmKG9sZFRhZy5wYXJlbnROb2RlKSBvbGRUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRUYWcpO1xuXHRcdH1cblx0XHRvbGRUYWdzLmxlbmd0aCA9IDA7XG5cdH0sIGFwcGx5OiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5ld1RhZ3MubGVuZ3RoOyBpKyspIG5ld1RhZ3NbaV0ucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdFx0bmV3VGFncy5sZW5ndGggPSAwO1xuXHR9IH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMubWluaUNzcyA9IChjaHVua0lkcywgcmVtb3ZlZENodW5rcywgcmVtb3ZlZE1vZHVsZXMsIHByb21pc2VzLCBhcHBseUhhbmRsZXJzLCB1cGRhdGVkTW9kdWxlc0xpc3QpID0+IHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGNodW5rSWRzLmZvckVhY2goKGNodW5rSWQpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHRjb25zdCBvbGRUYWcgPSBmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZik7XG5cdFx0aWYoIW9sZFRhZykgcmV0dXJuO1xuXHRcdHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIHRhZyA9IGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsICgpID0+IHtcblx0XHRcdFx0dGFnLmFzID0gXCJzdHlsZVwiO1xuXHRcdFx0XHR0YWcucmVsID0gXCJwcmVsb2FkXCI7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0sIHJlamVjdCk7XG5cdFx0XHRvbGRUYWdzLnB1c2gob2xkVGFnKTtcblx0XHRcdG5ld1RhZ3MucHVzaCh0YWcpO1xuXHRcdH0pKTtcblx0fSk7XG59IiwiaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi9Qb3BvdmVyJztcblxuY29uc3QgcG9wQnV0dG9uID0gbmV3IFBvcG92ZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ1dHRvbicpKTtcbnBvcEJ1dHRvbi5pbml0KCk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcG92ZXIge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5idXR0b24gPSBlbGVtZW50O1xuICAgIHRoaXMuc2hvd1BvcG92ZXIgPSB0aGlzLnNob3dQb3BvdmVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuY3JlYXRlUG9wb3ZlcigpO1xuICAgIHRoaXMuYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zaG93UG9wb3Zlcik7XG4gIH1cblxuICBjcmVhdGVQb3BvdmVyKCkge1xuICAgIHRoaXMucG9wQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5wb3BDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncG9wX2NvbnRhaW5lcicpO1xuICAgIGNvbnN0IHBvcFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcG9wVGl0bGUuY2xhc3NMaXN0LmFkZCgncG9wX3RpdGxlJyk7XG4gICAgcG9wVGl0bGUuaW5uZXJUZXh0ID0gdGhpcy5idXR0b24uZGF0YXNldC5wb3BvdmVyVGl0bGU7XG4gICAgY29uc3QgcG9wVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHBvcFRleHQuY2xhc3NMaXN0LmFkZCgncG9wX3RleHQnKTtcbiAgICBwb3BUZXh0LmlubmVyVGV4dCA9IHRoaXMuYnV0dG9uLmRhdGFzZXQucG9wb3ZlckNvbnRlbnQ7XG4gICAgdGhpcy5wb3BDb250YWluZXIuYXBwZW5kKHBvcFRpdGxlLCBwb3BUZXh0KTtcbiAgfVxuXG4gIHNob3dQb3BvdmVyKCkge1xuICAgIGlmIChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMucG9wQ29udGFpbmVyKSkge1xuICAgICAgdGhpcy5wb3BDb250YWluZXIucmVtb3ZlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5idXR0b24uYWZ0ZXIodGhpcy5wb3BDb250YWluZXIpO1xuXG4gICAgY29uc3QgY29vcmRzID0gdGhpcy5idXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdGhpcy5wb3BDb250YWluZXIuc3R5bGUubGVmdCA9IGAke3dpbmRvdy5zY3JvbGxYICsgY29vcmRzLmxlZnQgKyB0aGlzLmJ1dHRvbi5vZmZzZXRXaWR0aCAvIDIgLSB0aGlzLnBvcENvbnRhaW5lci5vZmZzZXRXaWR0aCAvIDJ9cHhgO1xuICAgIHRoaXMucG9wQ29udGFpbmVyLnN0eWxlLnRvcCA9IGAke3dpbmRvdy5zY3JvbGxZICsgY29vcmRzLnRvcCAtIHRoaXMucG9wQ29udGFpbmVyLm9mZnNldEhlaWdodCAtIDV9cHhgO1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qXG4gIGVzbGludC1kaXNhYmxlXG4gIG5vLWNvbnNvbGUsXG4gIGZ1bmMtbmFtZXNcbiovXG52YXIgbm9ybWFsaXplVXJsID0gcmVxdWlyZSgnLi9ub3JtYWxpemUtdXJsJyk7XG5cbnZhciBzcmNCeU1vZHVsZUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBub0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJztcbnZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCB0aW1lKSB7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcblxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uQ2FsbCwgdGltZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKSB7XG4gIHZhciBzcmMgPSBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXTtcblxuICBpZiAoIXNyYykge1xuICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgICBzcmMgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgICB2YXIgbGFzdFNjcmlwdFRhZyA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKGxhc3RTY3JpcHRUYWcpIHtcbiAgICAgICAgc3JjID0gbGFzdFNjcmlwdFRhZy5zcmM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3JjQnlNb2R1bGVJZFttb2R1bGVJZF0gPSBzcmM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZpbGVNYXApIHtcbiAgICBpZiAoIXNyYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNwbGl0UmVzdWx0ID0gc3JjLnNwbGl0KC8oW15cXFxcL10rKVxcLmpzJC8pO1xuICAgIHZhciBmaWxlbmFtZSA9IHNwbGl0UmVzdWx0ICYmIHNwbGl0UmVzdWx0WzFdO1xuXG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlTWFwKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKCcuanMnLCAnLmNzcycpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZU1hcC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAobWFwUnVsZSkge1xuICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoZmlsZW5hbWUsIFwiXFxcXC5qcyRcIiksICdnJyk7XG4gICAgICByZXR1cm4gbm9ybWFsaXplVXJsKHNyYy5yZXBsYWNlKHJlZywgXCJcIi5jb25jYXQobWFwUnVsZS5yZXBsYWNlKC97ZmlsZU5hbWV9L2csIGZpbGVuYW1lKSwgXCIuY3NzXCIpKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNzcyhlbCwgdXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuXG4gICAgdXJsID0gZWwuaHJlZi5zcGxpdCgnPycpWzBdO1xuICB9XG5cbiAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbC5pc0xvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAvLyBXZSBzZWVtIHRvIGJlIGFib3V0IHRvIHJlcGxhY2UgYSBjc3MgbGluayB0aGF0IGhhc24ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNoYW5naW5nIHRoZSBzYW1lIGZpbGUgbW9yZSB0aGFuIG9uY2UuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF1cmwgfHwgISh1cmwuaW5kZXhPZignLmNzcycpID4gLTEpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgZWwudmlzaXRlZCA9IHRydWU7XG4gIHZhciBuZXdFbCA9IGVsLmNsb25lTm9kZSgpO1xuICBuZXdFbC5pc0xvYWRlZCA9IGZhbHNlO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmhyZWYgPSBcIlwiLmNvbmNhdCh1cmwsIFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7XG5cbiAgaWYgKGVsLm5leHRTaWJsaW5nKSB7XG4gICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGVsLm5leHRTaWJsaW5nKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld0VsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSZWxvYWRVcmwoaHJlZiwgc3JjKSB7XG4gIHZhciByZXQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG4gIGhyZWYgPSBub3JtYWxpemVVcmwoaHJlZiwge1xuICAgIHN0cmlwV1dXOiBmYWxzZVxuICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuXG4gIHNyYy5zb21lKGZ1bmN0aW9uICh1cmwpIHtcbiAgICBpZiAoaHJlZi5pbmRleE9mKHNyYykgPiAtMSkge1xuICAgICAgcmV0ID0gdXJsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZFN0eWxlKHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKTtcbiAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB1cmwgPSBnZXRSZWxvYWRVcmwoZWwuaHJlZiwgc3JjKTtcblxuICAgIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh1cmwpIHtcbiAgICAgIHVwZGF0ZUNzcyhlbCwgdXJsKTtcbiAgICAgIGxvYWRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxvYWRlZDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkQWxsKCkge1xuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVDc3MoZWwpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KHVybCkge1xuICAvLyBBbiBVUkwgaXMgbm90IGFuIHJlcXVlc3QgaWZcbiAgLy8gSXQgaXMgbm90IGh0dHAgb3IgaHR0cHNcbiAgaWYgKCEvXmh0dHBzPzovaS50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG5vRG9jdW1lbnQpIHtcbiAgICBjb25zb2xlLmxvZygnbm8gd2luZG93LmRvY3VtZW50IGZvdW5kLCB3aWxsIG5vdCBITVIgQ1NTJyk7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH1cblxuICB2YXIgZ2V0U2NyaXB0U3JjID0gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzcmMgPSBnZXRTY3JpcHRTcmMob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgdmFyIHJlbG9hZGVkID0gcmVsb2FkU3R5bGUoc3JjKTtcblxuICAgIGlmIChvcHRpb25zLmxvY2Fscykge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzcycpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHJlbG9hZGVkKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gY3NzIHJlbG9hZCAlcycsIHNyYy5qb2luKCcgJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWJvdW5jZSh1cGRhdGUsIDUwKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5mdW5jdGlvbiBub3JtYWxpemVVcmwocGF0aENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHBhdGhDb21wb25lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGl0ZW0pIHtcbiAgICBzd2l0Y2ggKGl0ZW0pIHtcbiAgICAgIGNhc2UgJy4uJzpcbiAgICAgICAgYWNjdW11bGF0b3IucG9wKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICcuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCBbXSkuam9pbignLycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmxTdHJpbmcpIHtcbiAgdXJsU3RyaW5nID0gdXJsU3RyaW5nLnRyaW0oKTtcblxuICBpZiAoL15kYXRhOi9pLnRlc3QodXJsU3RyaW5nKSkge1xuICAgIHJldHVybiB1cmxTdHJpbmc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB1cmxTdHJpbmcuaW5kZXhPZignLy8nKSAhPT0gLTEgPyB1cmxTdHJpbmcuc3BsaXQoJy8vJylbMF0gKyAnLy8nIDogJyc7XG4gIHZhciBjb21wb25lbnRzID0gdXJsU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChwcm90b2NvbCwgJ2knKSwgJycpLnNwbGl0KCcvJyk7XG4gIHZhciBob3N0ID0gY29tcG9uZW50c1swXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLCAnJyk7XG4gIGNvbXBvbmVudHNbMF0gPSAnJztcbiAgdmFyIHBhdGggPSBub3JtYWxpemVVcmwoY29tcG9uZW50cyk7XG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRoO1xufTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNjMxODI4MjA2MjgwXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi9ob21lL2FwcHZleW9yL3Byb2plY3RzL2Foai1odHRwLWZvcm1zLTEvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dmFyIGV4ZWNPcHRpb25zID0geyBpZDogbW9kdWxlSWQsIG1vZHVsZTogbW9kdWxlLCBmYWN0b3J5OiBfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXSwgcmVxdWlyZTogX193ZWJwYWNrX3JlcXVpcmVfXyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTtcblx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRleGVjT3B0aW9ucy5mYWN0b3J5LmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGV4ZWNPcHRpb25zLnJlcXVpcmUpO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGV4ZWN1dGlvbiBpbnRlcmNlcHRvclxuX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gW107XG5cbiIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uaHUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIFwibWFpblwiICsgXCIuY3NzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1yRiA9ICgpID0+IFwibWFpbi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gXCJkMzdkNTNkZjMwOWFlNzkzY2ZhNFwiIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsInZhciBjdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xudmFyIGluc3RhbGxlZE1vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmM7XG5cbi8vIG1vZHVsZSBhbmQgcmVxdWlyZSBjcmVhdGlvblxudmFyIGN1cnJlbnRDaGlsZE1vZHVsZTtcbnZhciBjdXJyZW50UGFyZW50cyA9IFtdO1xuXG4vLyBzdGF0dXNcbnZhciByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMgPSBbXTtcbnZhciBjdXJyZW50U3RhdHVzID0gXCJpZGxlXCI7XG5cbi8vIHdoaWxlIGRvd25sb2FkaW5nXG52YXIgYmxvY2tpbmdQcm9taXNlcztcblxuLy8gVGhlIHVwZGF0ZSBpbmZvXG52YXIgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnM7XG52YXIgcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbl9fd2VicGFja19yZXF1aXJlX18uaG1yRCA9IGN1cnJlbnRNb2R1bGVEYXRhO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkucHVzaChmdW5jdGlvbiAob3B0aW9ucykge1xuXHR2YXIgbW9kdWxlID0gb3B0aW9ucy5tb2R1bGU7XG5cdHZhciByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShvcHRpb25zLnJlcXVpcmUsIG9wdGlvbnMuaWQpO1xuXHRtb2R1bGUuaG90ID0gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG9wdGlvbnMuaWQsIG1vZHVsZSk7XG5cdG1vZHVsZS5wYXJlbnRzID0gY3VycmVudFBhcmVudHM7XG5cdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRvcHRpb25zLnJlcXVpcmUgPSByZXF1aXJlO1xufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUocmVxdWlyZSwgbW9kdWxlSWQpIHtcblx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cdGlmICghbWUpIHJldHVybiByZXF1aXJlO1xuXHR2YXIgZm4gPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuXHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG5cdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuXHRcdFx0XHR2YXIgcGFyZW50cyA9IGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cztcblx0XHRcdFx0aWYgKHBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG5cdFx0XHRcdFx0cGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuXHRcdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG5cdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuXHRcdFx0XHRcdHJlcXVlc3QgK1xuXHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG5cdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdCk7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVxdWlyZShyZXF1ZXN0KTtcblx0fTtcblx0dmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIHJlcXVpcmVbbmFtZV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmVxdWlyZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGZvciAodmFyIG5hbWUgaW4gcmVxdWlyZSkge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVxdWlyZSwgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKG5hbWUpKTtcblx0XHR9XG5cdH1cblx0Zm4uZSA9IGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0cmV0dXJuIHRyYWNrQmxvY2tpbmdQcm9taXNlKHJlcXVpcmUuZShjaHVua0lkKSk7XG5cdH07XG5cdHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG1vZHVsZUlkLCBtZSkge1xuXHR2YXIgaG90ID0ge1xuXHRcdC8vIHByaXZhdGUgc3R1ZmZcblx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG5cdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG5cdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG5cdFx0X3NlbGZJbnZhbGlkYXRlZDogZmFsc2UsXG5cdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG5cdFx0X21haW46IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cdFx0X3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTtcblx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IG1vZHVsZUlkO1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG5cdFx0fSxcblxuXHRcdC8vIE1vZHVsZSBBUElcblx0XHRhY3RpdmU6IHRydWUsXG5cdFx0YWNjZXB0OiBmdW5jdGlvbiAoZGVwLCBjYWxsYmFjaykge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHR9LFxuXHRcdGRlY2xpbmU6IGZ1bmN0aW9uIChkZXApIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG5cdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG5cdFx0fSxcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG5cdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cdFx0aW52YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5fc2VsZkludmFsaWRhdGVkID0gdHJ1ZTtcblx0XHRcdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdFx0XHRjYXNlIFwiaWRsZVwiOlxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0XHRjYXNlIFwiY2hlY2tcIjpcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VcIjpcblx0XHRcdFx0Y2FzZSBcImFwcGx5XCI6XG5cdFx0XHRcdFx0KHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyB8fCBbXSkucHVzaChcblx0XHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHQvLyBpZ25vcmUgcmVxdWVzdHMgaW4gZXJyb3Igc3RhdGVzXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIE1hbmFnZW1lbnQgQVBJXG5cdFx0Y2hlY2s6IGhvdENoZWNrLFxuXHRcdGFwcGx5OiBob3RBcHBseSxcblx0XHRzdGF0dXM6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRpZiAoIWwpIHJldHVybiBjdXJyZW50U3RhdHVzO1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0dmFyIGlkeCA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblxuXHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuXHRcdGRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuXHR9O1xuXHRjdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob3Q7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHtcblx0Y3VycmVudFN0YXR1cyA9IG5ld1N0YXR1cztcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG5cdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbn1cblxuZnVuY3Rpb24gdHJhY2tCbG9ja2luZ1Byb21pc2UocHJvbWlzZSkge1xuXHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdHNldFN0YXR1cyhcInByZXBhcmVcIik7XG5cdFx0XHRibG9ja2luZ1Byb21pc2VzLnB1c2gocHJvbWlzZSk7XG5cdFx0XHR3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKSB7XG5cdGlmIChibG9ja2luZ1Byb21pc2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZuKCk7XG5cdHZhciBibG9ja2VyID0gYmxvY2tpbmdQcm9taXNlcztcblx0YmxvY2tpbmdQcm9taXNlcyA9IFtdO1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoYmxvY2tlcikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5T25VcGRhdGUpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG5cdH1cblx0c2V0U3RhdHVzKFwiY2hlY2tcIik7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0oKS50aGVuKGZ1bmN0aW9uICh1cGRhdGUpIHtcblx0XHRpZiAoIXVwZGF0ZSkge1xuXHRcdFx0c2V0U3RhdHVzKGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkgPyBcInJlYWR5XCIgOiBcImlkbGVcIik7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXG5cdFx0dmFyIHVwZGF0ZWRNb2R1bGVzID0gW107XG5cdFx0YmxvY2tpbmdQcm9taXNlcyA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoXG5cdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMpLnJlZHVjZShmdW5jdGlvbiAoXG5cdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRrZXlcblx0XHRcdCkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckNba2V5XShcblx0XHRcdFx0XHR1cGRhdGUuYyxcblx0XHRcdFx0XHR1cGRhdGUucixcblx0XHRcdFx0XHR1cGRhdGUubSxcblx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyxcblx0XHRcdFx0XHR1cGRhdGVkTW9kdWxlc1xuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdFx0XHR9LFxuXHRcdFx0W10pXG5cdFx0KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkoYXBwbHlPblVwZGF0ZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cblx0XHRcdFx0XHRyZXR1cm4gdXBkYXRlZE1vZHVsZXM7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJyZWFkeVwiKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0YXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKTtcblxuXHR2YXIgcmVzdWx0cyA9IGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLm1hcChmdW5jdGlvbiAoaGFuZGxlcikge1xuXHRcdHJldHVybiBoYW5kbGVyKG9wdGlvbnMpO1xuXHR9KTtcblx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSB1bmRlZmluZWQ7XG5cblx0dmFyIGVycm9ycyA9IHJlc3VsdHNcblx0XHQubWFwKGZ1bmN0aW9uIChyKSB7XG5cdFx0XHRyZXR1cm4gci5lcnJvcjtcblx0XHR9KVxuXHRcdC5maWx0ZXIoQm9vbGVhbik7XG5cblx0aWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG5cdFx0c2V0U3RhdHVzKFwiYWJvcnRcIik7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgZXJyb3JzWzBdO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG5cdHNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG5cblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmRpc3Bvc2UpIHJlc3VsdC5kaXNwb3NlKCk7XG5cdH0pO1xuXG5cdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2Vcblx0c2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cblx0dmFyIGVycm9yO1xuXHR2YXIgcmVwb3J0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG5cdH07XG5cblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuYXBwbHkpIHtcblx0XHRcdHZhciBtb2R1bGVzID0gcmVzdWx0LmFwcGx5KHJlcG9ydEVycm9yKTtcblx0XHRcdGlmIChtb2R1bGVzKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKG1vZHVsZXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuXHRpZiAoZXJyb3IpIHtcblx0XHRzZXRTdGF0dXMoXCJmYWlsXCIpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGxpc3QpIHtcblx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRpZiAobGlzdC5pbmRleE9mKG1vZHVsZUlkKSA8IDApIGxpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBsaXN0O1xuXHRcdH0pO1xuXHR9XG5cblx0c2V0U3RhdHVzKFwiaWRsZVwiKTtcblx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xufVxuXG5mdW5jdGlvbiBhcHBseUludmFsaWRhdGVkTW9kdWxlcygpIHtcblx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdGlmICghY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMpIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gdW5kZWZpbmVkO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlO1xuXHRcdC8vIHN0YXJ0IHVwZGF0ZSBjaHVuayBsb2FkaW5nXG5cdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7XG5cdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdFx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWRcblx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGhvdCB1cGRhdGUgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQpO1xuXHR9KTtcbn1cblxuc2VsZltcIndlYnBhY2tIb3RVcGRhdGVhaGpfaHR0cF9mb3Jtc18xXCJdID0gKGNodW5rSWQsIG1vcmVNb2R1bGVzLCBydW50aW1lKSA9PiB7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHRpZihjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0KSBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBjdXJyZW50VXBkYXRlUnVudGltZS5wdXNoKHJ1bnRpbWUpO1xuXHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0oKTtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdH1cbn07XG5cbnZhciBjdXJyZW50VXBkYXRlQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGU7XG52YXIgY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZVJ1bnRpbWU7XG5mdW5jdGlvbiBhcHBseUhhbmRsZXIob3B0aW9ucykge1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSBkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0gdW5kZWZpbmVkO1xuXHRmdW5jdGlvbiBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHModXBkYXRlTW9kdWxlSWQpIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjaGFpbjogW2lkXSxcblx0XHRcdFx0aWQ6IGlkXG5cdFx0XHR9O1xuXHRcdH0pO1xuXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG5cdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG5cdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG5cdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdGlmIChcblx0XHRcdFx0IW1vZHVsZSB8fFxuXHRcdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkICYmICFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWQpXG5cdFx0XHQpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcblx0XHRcdFx0dmFyIHBhcmVudCA9IF9fd2VicGFja19yZXF1aXJlX18uY1twYXJlbnRJZF07XG5cdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcblx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuXHRcdFx0XHRxdWV1ZS5wdXNoKHtcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuXHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuXHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG5cdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuXHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblxuXHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuXHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG5cdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cblx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZShtb2R1bGUpIHtcblx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIG1vZHVsZS5pZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuXHRcdCk7XG5cdH07XG5cblx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gY3VycmVudFVwZGF0ZSkge1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0XHR2YXIgbmV3TW9kdWxlRmFjdG9yeSA9IGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdO1xuXHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuXHRcdFx0dmFyIHJlc3VsdDtcblx0XHRcdGlmIChuZXdNb2R1bGVGYWN0b3J5KSB7XG5cdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyhtb2R1bGVJZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgPSB7XG5cdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cblx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG5cdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG5cdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcblx0XHRcdH1cblx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXJyb3I6IGFib3J0RXJyb3Jcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChkb0FwcGx5KSB7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gbmV3TW9kdWxlRmFjdG9yeTtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcblx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG5cdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGN1cnJlbnRVcGRhdGUgPSB1bmRlZmluZWQ7XG5cblx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuXHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG5cdGZvciAodmFyIGogPSAwOyBqIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbal07XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdICYmXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQgJiZcblx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcblx0XHRcdGFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJlxuXHRcdFx0Ly8gd2hlbiBjYWxsZWQgaW52YWxpZGF0ZSBzZWxmLWFjY2VwdGluZyBpcyBub3QgcG9zc2libGVcblx0XHRcdCFfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9zZWxmSW52YWxpZGF0ZWRcblx0XHQpIHtcblx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcblx0XHRcdFx0bW9kdWxlOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRyZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9yZXF1aXJlU2VsZixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdH0pO1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHZhciBpZHg7XG5cdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHZhciBkYXRhID0ge307XG5cblx0XHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG5cdFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRkaXNwb3NlSGFuZGxlcnNbal0uY2FsbChudWxsLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckRbbW9kdWxlSWRdID0gZGF0YTtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuXHRcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuXHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuXHRcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG5cdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuXHRcdFx0dmFyIGRlcGVuZGVuY3k7XG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0bW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcHBseTogZnVuY3Rpb24gKHJlcG9ydEVycm9yKSB7XG5cdFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcblx0XHRcdGZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bdXBkYXRlTW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVt1cGRhdGVNb2R1bGVJZF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcnVuIG5ldyBydW50aW1lIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWNjZXB0Q2FsbGJhY2sgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHRpZiAoYWNjZXB0Q2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoYWNjZXB0Q2FsbGJhY2spICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spO1xuXHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcy5wdXNoKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrc1trXS5jYWxsKG51bGwsIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aXRlbS5yZXF1aXJlKG1vZHVsZUlkKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH1cblx0fTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1ySS5qc29ucCA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgYXBwbHlIYW5kbGVycykge1xuXHRpZiAoIWN1cnJlbnRVcGRhdGUpIHtcblx0XHRjdXJyZW50VXBkYXRlID0ge307XG5cdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IFtdO1xuXHRcdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHR9XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gX193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXTtcblx0fVxufTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5qc29ucCA9IGZ1bmN0aW9uIChcblx0Y2h1bmtJZHMsXG5cdHJlbW92ZWRDaHVua3MsXG5cdHJlbW92ZWRNb2R1bGVzLFxuXHRwcm9taXNlcyxcblx0YXBwbHlIYW5kbGVycyxcblx0dXBkYXRlZE1vZHVsZXNMaXN0XG4pIHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB7fTtcblx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSByZW1vdmVkQ2h1bmtzO1xuXHRjdXJyZW50VXBkYXRlID0gcmVtb3ZlZE1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuXHRcdG9ialtrZXldID0gZmFsc2U7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRjaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0KSB7XG5cdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpKTtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXIgPSBmdW5jdGlvbiAoY2h1bmtJZCwgcHJvbWlzZXMpIHtcblx0XHRcdGlmIChcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rcyAmJlxuXHRcdFx0XHQhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGVDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0XHQpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkpO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0gPSAoKSA9PiB7XG5cdGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHRocm93IG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydDogbmVlZCBmZXRjaCBBUElcIik7XG5cdHJldHVybiBmZXRjaChfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYoKSkudGhlbigocmVzcG9uc2UpID0+IHtcblx0XHRpZihyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgcmV0dXJuOyAvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG5cdFx0aWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggdXBkYXRlIG1hbmlmZXN0IFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0fSk7XG59O1xuXG4vLyBubyBkZWZlcnJlZCBzdGFydHVwXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uXG5cbi8vIG5vIGRlZmVycmVkIHN0YXJ0dXAiLCIvLyBtb2R1bGUgY2FjaGUgYXJlIHVzZWQgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDc3Mik7XG4iXSwic291cmNlUm9vdCI6IiJ9